import os
from flask import Flask, jsonify, request, make_response
from flask_sqlalchemy import SQLAlchemy  # TODO: TÁCH RA -> Chuyển vào extensions.py
from datetime import datetime
from sqlalchemy.sql import text

app = Flask(__name__)

# TODO: TÁCH RA -> Chuyển phần config này vào một file config riêng nếu muốn
db_host = os.getenv('DB_HOST', 'localhost')
db_port = os.getenv('DB_PORT', '5432')
db_user = os.getenv('DB_USER', 'postgres')
db_password = os.getenv('DB_PASSWORD', '1')
db_name = os.getenv('DB_NAME', 'postgres')

app.config['SQLALCHEMY_DATABASE_URI'] = f'postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)  # TODO: TÁCH RA -> Chuyển `db = SQLAlchemy()` vào extensions.py, sau đó gọi `db.init_app(app)`

# TODO: TÁCH MODEL -> Chuyển model User vào models.py
class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    email_teams = db.Column(db.String(255), unique=True, nullable=False)
    sdt = db.Column(db.String(255), nullable=True)
    created_at = db.Column(db.TIMESTAMP, default=datetime.utcnow)
    update_at = db.Column(db.TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    def to_dict(self):
        return {
            "id": self.id,
            "name": self.name,
            "email_teams": self.email_teams,
            "sdt": self.sdt,
            "created_at": self.created_at,
            "update_at": self.update_at
        }

# TODO: TÁCH ROUTES -> Chuyển từng route vào user_routes.py
@app.route('/health', methods=['GET'])
def health_check():
    try:
        db.session.execute(text("SELECT 1"))
        return jsonify({"status": "healthy", "database": "connected"}), 200
    except Exception as e:
        return jsonify({"status": "unhealthy", "database": f"not connected: {str(e)}"}), 500

@app.route('/users', methods=['GET'])
def get_users():
    users = User.query.all()
    return jsonify([user.to_dict() for user in users])

@app.route('/users', methods=['POST'])
def create_user():
    data = request.get_json()
    if not data or 'name' not in data or 'email_teams' not in data:
        return make_response(jsonify({"error": "Thiếu thông tin name hoặc email_teams"}), 400)

    new_user = User(name=data['name'], email_teams=data['email_teams'], sdt=data.get('sdt'))
    db.session.add(new_user)
    db.session.commit()
    return jsonify(new_user.to_dict()), 201

@app.route('/users/<int:id>', methods=['PUT'])
def update_user(id):
    user = User.query.get(id)
    if not user:
        return jsonify({"error": "User không tồn tại"}), 404

    data = request.get_json()
    if 'name' in data:
        user.name = data['name']
    if 'email_teams' in data:
        user.email_teams = data['email_teams']
    if 'sdt' in data:
        user.sdt = data['sdt']

    db.session.commit()
    return jsonify(user.to_dict()), 200

@app.route('/users/<int:id>', methods=['DELETE'])
def delete_user(id):
    user = User.query.get(id)
    if not user:
        return jsonify({"error": "User không tồn tại"}), 404

    db.session.delete(user)
    db.session.commit()
    return jsonify({"message": "User đã bị xóa"}), 200

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)
